# -*- coding: utf-8 -*-
"""
Created on Tue Feb 18 14:15:51 2025

@author: ssenapat

This script generates a file with relative amplitudes saved for all possible pairwise comparisons between factors 
NOTE: Interaction between both factors (order and speed) has not been taken into account for this analysis

"""

def load_probe():
    
    file = Path('G:/Final_exps_spikes/LFP/Elfie/p1/p1_15/probe-info.csv')
    prb = pd.read_csv(file)
    prb_ylocs = prb['y']    # column representing the depths of channels
    return prb_ylocs


def load_downsampled_onsets(file):

    # read all saved downsized onset response per channel info - generated by lfp_ttest.py
    onsets = pd.read_csv(file, header=None)
    return onsets



def directionality_effect(df):
    
    effectdir_order = []
    effectdir_speed = []
    
    # order
    subset_d_o1 = df[df['order'] == 'original']['evoked_response'].reset_index(drop=True)
    subset_d_o2 = df[df['order'] == 'global_reversed']['evoked_response'].reset_index(drop=True)
    subset_d_o3 = df[df['order'] == 'local_reversed']['evoked_response'].reset_index(drop=True)
    
    diff_mean_o1o2 = np.mean(subset_d_o1) - np.mean(subset_d_o2)
    diff_mean_o1o3 = np.mean(subset_d_o1) - np.mean(subset_d_o3)
    diff_mean_o2o3 = np.mean(subset_d_o2) - np.mean(subset_d_o3)
    
    
    # speed
    subset_d_s1 = df[df['speed'] == 66]['evoked_response'].reset_index(drop=True)
    subset_d_s2 = df[df['speed'] == 75]['evoked_response'].reset_index(drop=True)
    subset_d_s3 = df[df['speed'] == 85]['evoked_response'].reset_index(drop=True)
        
    diff_mean_s1s2 = np.mean(subset_d_s1) - np.mean(subset_d_s2)
    diff_mean_s1s3 = np.mean(subset_d_s1) - np.mean(subset_d_s3)
    diff_mean_s2s3 = np.mean(subset_d_s2) - np.mean(subset_d_s3)
    
    effectdir_order = [diff_mean_o1o2, diff_mean_o1o3, diff_mean_o2o3]
    effectdir_speed = [diff_mean_s1s2, diff_mean_s1s3, diff_mean_s2s3]
        
    
    return effectdir_order, effectdir_speed
    
    
    

def data_prep(window_onsets, window):
    
    # based on behavioral experiement paradigm
    condition_order = ['original', 'global_reversed','original','original','global_reversed','local_reversed','local_reversed','global_reversed','local_reversed']
    condition_speed = [66,75,85,75,85,75,66,66,85]
    
    # combine all information in a dataframe
    data_df = pd.DataFrame(window_onsets)
    data_df.rename(columns={window : 'evoked_response'}, inplace=True)
    
    # add two factors
    data_df['order'] = np.repeat(condition_order, 10)
    data_df['speed'] = np.repeat(condition_speed, 10)

    
    # obtain difference between mean amplitude for each pairwise combination of factors
    directioneff_order, directioneff_speed = directionality_effect(data_df)
    # print('\n')
    # print(directioneff_order)
    # print(directioneff_speed)
    
    return directioneff_order, directioneff_speed
    


import numpy as np
import pandas as pd
import pickle
import os
from pathlib import Path

directory =  Path('G:/Final_exps_spikes/LFP/Elfie/p1/p1_15/')
directory_downsizedonsets = Path(str(directory) + '/donwsampled_onset_responses/')

# save the directional effect quantification as pickle 
save_loc = str(directory) + '/significance_tests/pairwise_direction_eff_without_interaction'
if not os.path.exists(save_loc):     # if the required folder does not exist, create one
    os.mkdir(save_loc)


# get probe info
probe_locs = load_probe()


for chan in range(1,385):
    
    channel_num = chan
    # print(chan)
        
    # load amplitudes associated with this channel for the given time period
    filepath = str(directory_downsizedonsets) + '/channel' + str(chan) + '_downsampled.csv'
    onset_mat = load_downsampled_onsets(filepath)
    
    directioneff_order = {}
    directioneff_speed = {}
    
    directioneff_combined = {}
    
    for window in range(len(onset_mat.columns)): # length is 12
        
        directioneff_oXs, directioneff_sXo = data_prep(onset_mat.iloc[:,window], window)
        
        windowname = 'timewindow_' + str(window+1)
        
        directioneff_order[windowname] = directioneff_oXs
        directioneff_speed[windowname] = directioneff_sXo
        
    directioneff_combined['main_order'] = directioneff_order
    directioneff_combined['main_speed'] = directioneff_speed
    
    
    # save to pickle
    destination_file = str(save_loc) + '/channel' + str(channel_num) + '_directionalInteraction_Amps_maineff.pkl'
    with open(destination_file, 'wb') as fp:
        pickle.dump(directioneff_combined, fp)
        print('dictionary saved successfully to file')
        fp.close()
    
