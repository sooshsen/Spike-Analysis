# -*- coding: utf-8 -*-
"""
Created on Fri Dec 13 12:55:04 2024

@author: ssenapat

PLOTTING ONLY FOR MUSIC  - heatmap and waveforms
"""

def load_trigger():
    '''
    Returns
    -------
    sorted_trigger_loc : TYPE
        Generates trigger information for music pieces

    '''
    # read the saved trigger channel info
    # file = '/home/ssenapat/groups/PrimNeu/Final_exps_spikes/LFP/Elfie/p1/p1_15/trigger_onset_for_py.npy'
    file = Path('G:/Final_exps_spikes/LFP/Elfie/p1/p1_15/trigger_onset_for_py.npy')
    triggers = pd.DataFrame(np.load(file))
    
    return triggers



def load_onset_response(file):
    '''
    Returns
    -------
    sorted_trigger_loc : TYPE
        Generates trigger information for music pieces

    '''
    
    # read all saved onset response per channel info - generated by lfp_onset_response.py
    onsets = pd.read_csv(file, header=None)
    
    return onsets


def identify_channel(filepath):
    
    folder = str(filepath)     

    folder_name_loc = re.search(r"channel[0-9]+", folder)
    ind = folder_name_loc.span()
    channelID = folder[ind[0]+7:ind[1]]        # get rid of the 'LFP' at the start of the channel ID name
    
    return int(channelID)



def load_probe():
    
    file = Path('G:/Final_exps_spikes/LFP/Elfie/p1/p1_15/probe-info.csv')
    prb = pd.read_csv(file)
    
    prb_ylocs = prb['y']    # column representing the depths of channels
    
    return prb_ylocs


def plot_tones_per_channel(chan_matrix, channel_num, trigger, savehere):
    
    ### USE NUMPY ARRAY SPLIT() HERE
    # averaging across each datapoint in this matrix (9 plots per channel, since averaging to be done for every 10 consecutive tones)
    avg_every_tone = np.zeros(3750)
    
    for ii in range(9):
        mean_across_tone = np.mean(chan_matrix[ii:ii+10], axis=0)
        avg_every_tone = np.vstack([avg_every_tone, mean_across_tone])
        ii = ii+10      # each stimulus has 10 trials
    
    avg_every_tone = np.delete(avg_every_tone, [0], axis=0) # remove 1st row, which is not crucial
    
    # avg all trials for all tones
    avg_all_tones = np.mean(chan_matrix, axis=0)
    
    all_data = np.vstack([avg_all_tones, avg_every_tone])
    all_data_df = pd.DataFrame(all_data)
    

    #%matplotlib qt
    
    fig, ax = plt.subplots()

    # plot all avg amplitudes per channel
    ax.plot(all_data_df.T.iloc[:,0], color='DarkRed', linewidth=3)
    
    for ii in range(1,10):
        ax.plot(all_data_df.T.iloc[:,ii] + ii*500, color='black')
    
    # identify onset point
    ax.axvline(x = 1251, color = 'r', linestyle = '--')

    # set ticks
    ax.set_xticks(np.arange(0,4500,1250), ['-500','0','500','1000'])
    ax.set_yticks(np.arange(0, 5000, 500), ['avg','1','2','3','4','5','6','7','8','9'])
    
    # label axes
    ax.set_xlabel('Time (in ms)')
    ax.set_ylabel('Music piece')
    ax.set_title('LFP : Channel ' + str(channel_num))

    # save the plots
    save_loc = str(savehere) + '/tones_per_channel'
    if not os.path.exists(save_loc):     # if the required folder does not exist, create one
        os.mkdir(save_loc)
    
    plt.savefig(str(save_loc) + '/channel' + str(channel_num) + '.png')
    plt.close()
    
    return avg_all_tones
    


def plot_channels_for_music(avg_every_channel, depths, savehere):
    
    save_loc = str(savehere) + '/channels_per_tone'
    if not os.path.exists(save_loc):     # if the required folder does not exist, create one
        os.mkdir(save_loc)
    # arraged as: chan1 10 trials, chan2 10 trials, and so on ...

    avg_every_channel_df = pd.DataFrame(avg_every_channel, index=depths)
    
    # #%matplotlib qt
    
    # heatmap
    fig, axs = plt.subplots(figsize=(15, 30))
    
    # axs.pcolormesh(avg_every_channel_df, cmap='RdBu_r')
    # axs = sns.heatmap(np.flip(avg_every_channel, 0), yticklabels = np.flip([range(384)], 0), cmap="crest", vmax=200, vmin=-200)     # reorder the array for plotting purpose
    sns.heatmap(avg_every_channel_df, cmap="coolwarm", vmax=400, vmin=-400)
    axs.invert_yaxis()
    
    # identify onset point
    axs.axvline(x = 1251, color = 'w', linestyle = '--', linewidth = 2)
    
    # set ticks
    axs.set_xticks(np.arange(0,4500,1250), ['-500','0','500','1000'], rotation=0)
    
    axs.set_xlabel('Time (in ms)')
    axs.set_ylabel('Depth')
    axs.set_title('All channels - All music pieces')
    
    plt.savefig(str(save_loc) + '/allchans_allmusicpiece_hm.png')
    plt.close()
    

    # waveform
    fig2, axs2 = plt.subplots(figsize=(20, 15))
    
    # plot all avg amplitudes per channel
    for ii in range(5, 384, 9):
        axs2.plot(avg_every_channel[ii] + ii*10, 'k')
    
    axs2.axvline(x = 1251, color = 'r', linestyle='dashed')
    
    # set ticks
    axs2.set_xticks(np.arange(0,4500,1250), ['-500','0','500','1000'])
    axs2.set_yticks(np.arange(0, 3840, 90), depths[5::9])
    
    # axs2.set_ylim(-75, 4000)
    
    axs2.set_xlabel('Time (in ms)')
    axs2.set_ylabel('Depth')
    
    axs2.set_title('All channels - All music pieces' )
    plt.savefig(str(save_loc) + '/allchans_allmusicpiece_wf.png')
    plt.close()
    

'''
# THIS IS FOR DATA EXCEPT MUSIC
def plot_channels_per_tone(allchans, trial, freq, trigger_num, savehere, depths):
    
    save_loc = str(savehere) + '/channels_per_tone'
    if not os.path.exists(save_loc):     # if the required folder does not exist, create one
        os.mkdir(save_loc)
    # arraged as: chan1 10 trials, chan2 10 trials, and so on ...

    chan_matrix = np.zeros(1000)
    
    for chan in range(0,len(allchans.T)):
        channel = allchans[:,chan]
        
        for ii in range(len(trial)):
            # relevant_points = channel[trigger[1].iloc[ii]-250:trigger[1].iloc[ii]+750]  # we look at 100 millisec before and 300 millisec after trigger onset
            relevant_points = channel[trial[ii]-250:trial[ii]+750]  # we look at 100 millisec before and 300 millisec after trigger onset
            chan_matrix = np.vstack([chan_matrix, relevant_points])

            
    chan_matrix = np.delete(chan_matrix, [0], axis=0) # remove 1st row, which is not crucial
    
    avg_every_channel = np.zeros(1000)
    
    for ii in range(384):
        mean_across_channel = np.mean(chan_matrix[ii:ii+10], axis=0)
        avg_every_channel = np.vstack([avg_every_channel, mean_across_channel])
        ii = ii+10
        
    avg_every_channel = np.delete(avg_every_channel, [0], axis=0) # remove 1st row, which is not crucial
    
    avg_every_channel_df = pd.DataFrame(avg_every_channel, index=depths)
    
    # #%matplotlib qt
    
    # heatmap
    fig, axs = plt.subplots(figsize=(15, 10))
    
    # axs = sns.heatmap(np.flip(avg_every_channel, 0), yticklabels = np.flip([range(384)], 0), cmap="crest", vmax=200, vmin=-200)     # reorder the array for plotting purpose
    sns.heatmap(avg_every_channel_df, cmap="crest", vmax=200, vmin=-200)
    
    x_ticks = np.arange(0, 1200, 250)
    x_ticklabels = ([-100, 0, 100, 200, 300])
    axs.set_xticks(x_ticks)
    axs.set_xticklabels(x_ticklabels, rotation=0)
    axs.axvline(x = 251, color = 'w', linestyle='dashed')
    axs.set_xlabel('Time (in ms)')
    axs.set_title('Trigger frequency:' + str(freq) + ' Hz' )
    
    # # y_ticks = np.arange(0, 384, 20)
    # y_ticklabels = (depths)
    # # axs.set_yticks(y_ticks)
    # axs.set_yticklabels(y_ticklabels)
    axs.set_ylabel('Depth')
    
    plt.savefig(str(save_loc) + '/trigger' + str(freq) + 'Hz_hm.png')
    plt.close()
    


    # waveform
    fig2, axs2 = plt.subplots(figsize=(5, 15))
    x = range(1000)
    
    # plot all avg amplitudes per channel
    for ii in range(5, 384, 9):
        axs2.plot(x, avg_every_channel[ii] + ii*10, 'k')
    
    axs2.axvline(x = 251, color = 'r', linestyle='dashed')
    
    x_ticks = np.arange(0, 1200, 250)
    axs2.set_xticks(x_ticks)
    x_ticklabels = ([-100, 0, 100, 200, 300])
    axs2.set_xticklabels(x_ticklabels)
    
    y_ticks = np.arange(0, 3840, 90)
    axs2.set_yticks(y_ticks)
    y_ticklabels = depths.iloc[5::9]
    axs2.set_yticklabels(y_ticklabels)
    
    # axs2.set_ylim(-75, 4000)
    
    axs2.set_xlabel('Time (in ms)')
    axs2.set_ylabel('Depth')
    
    axs2.set_title('Trigger frequency:' + str(freq) + ' Hz (waveforms)' )
    plt.savefig(str(save_loc) + '/trigger' + str(freq) + 'Hz_wf.png')
    plt.close()
    
'''



import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
from pathlib import Path
import re



trigger = load_trigger()


directory = Path('G:/Final_exps_spikes/LFP/Elfie/p1/p1_15/onset_responses/')

avg_all_tones = np.zeros(3750)      # this is currently hard-coded, need to be changed later
channel_order = []

for chan in os.listdir(directory):
    filepath = str(directory) + '/' + chan
    onset_mat = load_onset_response(filepath)
    channel_num = identify_channel(filepath)       # identify current channel based on filepath
    
    channel_order.append(channel_num)
    
    # for each channel
    savehere = Path('G:/Final_exps_spikes/LFP/Elfie/p1/p1_15/plots/')
    if not os.path.exists(savehere):     # if the required folder does not exist, create one
        os.mkdir(savehere)
    
    # plot every tone per channel - 1st plot
    tones_per_channel = plot_tones_per_channel(onset_mat, channel_num, trigger, savehere)
    avg_all_tones = np.vstack([avg_all_tones, tones_per_channel])
    

avg_all_tones = np.delete(avg_all_tones, [0], axis=0) # remove 1st row, which is not crucial

# fix the data
avg_all_tones_df = pd.DataFrame(avg_all_tones)
avg_all_tones_df['channelnum'] = channel_order

# sort the data based on channel numbers
avg_all_tones_df = avg_all_tones_df.sort_values(by=['channelnum'], ignore_index=True)

# get probe info
probe_locs = load_probe()

# add probe info to rest of the data
avg_all_tones_df['probe_locs'] = probe_locs

# sort the data based on depth of channels
avg_all_tones_df = avg_all_tones_df.sort_values(by=['probe_locs'], ignore_index=True)

updated_avg_all_tones = np.array(avg_all_tones_df.drop(['channelnum', 'probe_locs'], axis=1))



# ## 2nd plot
# savehere = Path('G:/Final_exps_spikes/LFP/Elfie/p1/p1_15/plots/')
# if not os.path.exists(savehere):     # if the required folder does not exist, create one
#     os.mkdir(savehere)
    
# plot_channels_for_music(updated_avg_all_tones, np.array(avg_all_tones_df['probe_locs']), savehere)
