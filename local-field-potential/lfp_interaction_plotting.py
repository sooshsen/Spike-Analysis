# -*- coding: utf-8 -*-
"""
Created on Tue Jan 28 15:00:59 2025

@author: ssenapat

evaluate correlation
MIGHT BE USEFUL LATER !!! - Not in use currently
"""

# read one channel at a time and separate it into indvidual clusters

def load_trigger():
    '''
    Returns
    -------
    sorted_trigger_loc : TYPE
        Generates trigger information for music pieces

    '''
    # read the saved trigger channel info
    # file = '/home/ssenapat/groups/PrimNeu/Final_exps_spikes/LFP/Elfie/p1/p1_15/trigger_onset_for_py.npy'
    file = Path('G:/Final_exps_spikes/LFP/Elfie/p1/p1_15/trigger_onset_for_py.npy')
    triggers = pd.DataFrame(np.load(file))
    
    return triggers



def load_onset_response(file):
    '''
    Returns
    -------
    sorted_trigger_loc : TYPE
        Generates trigger information for music pieces

    '''
    
    # read all saved onset response per channel info - generated by lfp_onset_response.py
    onsets = pd.read_csv(file, header=None)
    
    return onsets


def identify_channel(filepath):
    
    folder = str(filepath)     

    folder_name_loc = re.search(r"channel[0-9]+", folder)
    ind = folder_name_loc.span()
    channelID = folder[ind[0]+7:ind[1]]        # get rid of the 'LFP' at the start of the channel ID name
    
    return int(channelID)



def plot_tones_per_channel(chan_matrix, channel_num, trigger, savehere):
    
    ### USE NUMPY ARRAY SPLIT() HERE
    # averaging across each datapoint in this matrix (9 plots per channel, since averaging to be done for every 10 consecutive tones)
    avg_every_tone_postonset_pre = []
    avg_every_tone_postonset_0_500 = []
    avg_every_tone_postonset_500_1000 = []
    
    chan_matrix_postonset_pre = chan_matrix.iloc[:, 0:1250]
    chan_matrix_postonset_0_500 = chan_matrix.iloc[:, 1250:2500]
    chan_matrix_postonset_500_1000 = chan_matrix.iloc[:, 2500:len(chan_matrix.columns)]
    
    for ii in range(9):
        # 0 - 0.5s before onset
        mean_across_tone_postonset_pre = np.mean(chan_matrix_postonset_pre[ii:ii+10], axis=0)
        avg_every_tone_postonset_pre = np.append(avg_every_tone_postonset_pre, mean_across_tone_postonset_pre)
        
        # 0 - 0.5s after onset
        mean_across_tone_postonset_0_500 = np.mean(chan_matrix_postonset_0_500[ii:ii+10], axis=0)
        avg_every_tone_postonset_0_500 = np.append(avg_every_tone_postonset_0_500, mean_across_tone_postonset_0_500)
        
        # 0.5 - 1s after onset
        mean_across_tone_postonset_500_1000 = np.mean(chan_matrix_postonset_500_1000[ii:ii+10], axis=0)
        avg_every_tone_postonset_500_1000 = np.append(avg_every_tone_postonset_500_1000, mean_across_tone_postonset_500_1000)
        
        ii = ii+10      # each stimulus has 10 trials
    
    # based on behavioral experiement paradigm
    condition_order = ['original', 'global_reversed','original','original','global_reversed','local_reversed','local_reversed','global_reversed','local_reversed']
    condition_speed = [66,75,85,75,85,75,66,66,85]
    
    
    # 0 - 0.5s before onset
    data_to_plot_pre = pd.DataFrame(avg_every_tone_postonset_pre)
    data_to_plot_pre.rename(columns={0 : 'evoked_response'}, inplace=True)

    data_to_plot_pre['condition_order'] = np.repeat(condition_order, len(chan_matrix_postonset_pre.columns))
    data_to_plot_pre['condition_speed'] = np.repeat(condition_speed, len(chan_matrix_postonset_pre.columns))
    
    
    # 0 - 0.5s after onset
    data_to_plot_1 = pd.DataFrame(avg_every_tone_postonset_0_500)
    data_to_plot_1.rename(columns={0 : 'evoked_response'}, inplace=True)

    data_to_plot_1['condition_order'] = np.repeat(condition_order, len(chan_matrix_postonset_0_500.columns))
    data_to_plot_1['condition_speed'] = np.repeat(condition_speed, len(chan_matrix_postonset_0_500.columns))
    
    # data_to_plot['evoked_response_abs'] = abs(data_to_plot['evoked_response'])
    
    
    # 0.5 - 1s after onset
    data_to_plot_2 = pd.DataFrame(avg_every_tone_postonset_500_1000)
    data_to_plot_2.rename(columns={0 : 'evoked_response'}, inplace=True)
    
    data_to_plot_2['condition_order'] = np.repeat(condition_order, len(chan_matrix_postonset_500_1000.columns))
    data_to_plot_2['condition_speed'] = np.repeat(condition_speed, len(chan_matrix_postonset_500_1000.columns))
    
    
    #%matplotlib qt
    
    fig, axes = plt.subplots(nrows=1, ncols=3, sharex=True, figsize=(12, 6))
    
    # plot
    sns.boxplot(x="condition_order", y="evoked_response",
            hue="condition_speed", palette=["m", "g","b"],
            data=data_to_plot_pre, ax=axes[0])
    sns.despine(offset=10, trim=True)
    axes[0].set_title('500ms pre onset : Channel ' + str(channel_num))
    
    sns.boxplot(x="condition_order", y="evoked_response",
            hue="condition_speed", palette=["m", "g","b"],
            data=data_to_plot_1, ax=axes[1])
    sns.despine(offset=10, trim=True)
    axes[1].set_title('500ms post onset : Channel ' + str(channel_num))
    
    sns.boxplot(x="condition_order", y="evoked_response",
            hue="condition_speed", palette=["m", "g","b"],
            data=data_to_plot_2, ax=axes[2])
    sns.despine(offset=10, trim=True)
    axes[2].set_title('500-1000ms post onset : Channel ' + str(channel_num))

    


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
from pathlib import Path
import re
    

trigger = load_trigger()
   
directory = Path('G:/Final_exps_spikes/LFP/Elfie/p1/p1_15/onset_responses/')

avg_all_tones = np.zeros(3750)      # this is currently hard-coded, need to be changed later
channel_order = []

for chan in os.listdir(directory):
    filepath = str(directory) + '/' + chan
    onset_mat = load_onset_response(filepath)
    channel_num = identify_channel(filepath)       # identify current channel based on filepath
    
    channel_order.append(channel_num)
    
    # for each channel
    savehere = Path('G:/Final_exps_spikes/LFP/Elfie/p1/p1_15/plots/')
    if not os.path.exists(savehere):     # if the required folder does not exist, create one
        os.mkdir(savehere)
    
    # plot every tone per channel - 1st plot
    tones_per_channel = plot_tones_per_channel(onset_mat, channel_num, trigger, savehere)
    avg_all_tones = np.vstack([avg_all_tones, tones_per_channel])
    

avg_all_tones = np.delete(avg_all_tones, [0], axis=0) # remove 1st row, which is not crucial
